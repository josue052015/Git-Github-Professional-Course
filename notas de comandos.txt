pwd => es para ver el directorio actual 

cd => es para cambiar directorio

ls => lista los archivos que estan en ese directorio

ls -al => lista todos los archivos en forma de lista, incluso los ocultos

cd .. => se utiliza para regresar al directorio anterior

~ => representa la carpeta home del usuario

mkdir nombre => crea una carpeta

touch nombre.txt => se utiliza para crear archivos que no tienen nada dentro

cat => se utiliza para ver el contenido de un archivo

history => es para ver el historial de todos los comandos que utilizaste. Si quieres repetir algun comando solo tienes que escribir: !numero de comando

rm nombreArchivo => es para borrar archivos CUIDADO PUEDES BORRAR EL DISCO DURO

ctrl + L => borrar consola

.................... configuracion de git ...................................

git config --list => muestra las configuraciones que tenemos y las que nos faltan (es muy util cuando quieres comprobar el user)

git config --list --show-origin => muestra la ubicacion de los archivos de configuraciones

git config --global user.name "username" => configura el usuario

git config --global user.email "email" => configura el email

-------------------- comandos de git ----------------------------------------

git init => inicializa el repositorio en el directorio 

git status => muestra el estado del repositiorio del proyecto por ejemplo si hay cambios en stage o que no se han subido.

git add nombreArchivo => para agregar los cambios al repo local 

git rm nombreArchivo => es para borrar los cambios de stached (esto te ayuda cuando te equivocas con el git add) PERSONALMENTE PREFIERO "git reset nombreArchivo HEAD"

git rm nombreArchivo => es para borrar los cambios de stached de la memoria cache (esto te ayuda cuando te equivocas con el git add) PERSONALMENTE PREFIERO "git reset nombreArchivo HEAD"

git commit -m => es para subir los cambios al repositorio local

git restore nombreArchivo => restaura los cambios en el directorio

git log nombreArchivo => se usa para ver el historial de cambios en el archivo y por quien (este solo muestra el historial de commits)

git log --stat => esto te muestra los documentos que cambiaron por commit

git show nombreArchivo => te muestra los cambios que se han ido implmentando en el archivo (este muestra los cambios de codigo)

git diff codigoCambio1 codigoCambio2 => muestra los cambios de codigo que se han hecho en un archivo entre un commit y otro (tienes que poner los codigos de los commit que te tira el comando git log)

git checkout codigoCambio nombreArchivo => es para traer cambios en especificos desde el repositorio a tu proyecto (esto es util cuando un compañero realiza unos cambios y tu quieres tener esos cambios)

git reset codigoCambio => se utiliza para devolver el archivo a la version del commit (existen 2 tipos: --soft => devuelve los cambios pero lo que este en staging lo deja ahi pendiente --hard => devuelte todo y lo que este en staging tambien lo borra) 

git reset nombreArchivo HEAD =>  Este es el comando para sacar archivos del área de staging. No para borrarlos ni nada de eso, solo para que los últimos cambios de estos archivos no se envíen al último commit, a menos que cambiemos de opinión y los incluyamos de nuevo en staging con git add, por supuesto.

git -am "mensaje" => sirve para hacer commits sin tener que agregar los documentos a staging


......................Comandos para trabajar con repositorios remotos............................................................

git push => esto es para llevar los cambios del repositorio local al repositorio remoto

git fetch => esto es para traer los cambios de alguien mas a mi repositorio local, pero esto no se refleja en los archivos

git merge => esto se usa cuando quieres reflejar los ultimos cambios de tu repositorio local en tus archivos. Por ejemplo, en el caso de que traigas cambios de otras personas a traves de git fetch.

git pull => hace lo mismo que si hicieras git fetch + git merge (trae los ultimos cambios del repositorio remoto y se te refleja en tus archivos)

git remote add origin URLRepo => agrega un origen remoto de los archivos de nuestro repo (esto se usa para agregar el repo remoto de github para que podamos hacer fetch y push al repo en github)

git push origin nombreRama => esto lo que hace es que le dice a git que le envie los archivos de una rama al repositorio remoto en gitHub (en este caso es la rama master)

....................... trabajo con ramas...............................................

git branch nombreRama => se utiliza para crear una rama nueva

git checkout nombreRama => se utiliza para moverte entre ramas




................ NOTAS.........................

# si haces un commit sin mensaje git te abrira el editor de texto VIM que es un editor de texto pero en linea de commandos y cuando escribes
  el commit le tienes que dar esc + shift + Z + Z

# en git diff el orden de las versiones que pongas en los parametros definira que registre como cambion. Es decir, si pones el commit mas viejo de primero registrara como ultimos cambios lo del segundo commit, pero si lo haces '
 al reves pondra los cambios del commit mas viejo como los mas recientes.

# el git diff se puede utilizar tambien para ver la comparacion de los cambios en staging solo poniendo "git diff" cuando tengas algo que todavia no este en stage

# cuando los cambios son muy largos y te muestra el mensaje del END con la letra Q puedes salirte de ahi y con las flechas ir de arriba a abajo

# Si haces un git checkout y quieres devolverlo a su ultima version de la rama solo tienes que hacer por ejemplo "git checkout master(que es el nombre de la rama) nombreArchivo"

# Si hiciste un git checkout y quieres seguir con esa version de tus cambios, solo tienes que darle un commit a esos cambios y ya estaran en el HEAD de tu rama.









